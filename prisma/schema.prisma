// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    // 'admin', 'berber', 'musteri'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  berber        Berber?
  musteri       Musteri?
}

model Berber {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  adres         String
  telefon       String
  calismaSaatleri Json
  hizmetler     Json
  randevular    Randevu[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Musteri {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  telefon       String?
  randevular    Randevu[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Randevu {
  id            String    @id @default(cuid())
  berberId      String
  musteriId     String
  tarih         DateTime
  saat          String
  hizmet        String
  durum         String    // 'beklemede', 'onaylandi', 'iptal', 'tamamlandi'
  berber        Berber    @relation(fields: [berberId], references: [id])
  musteri       Musteri   @relation(fields: [musteriId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Service {
  id          String    @id @default(cuid())
  barberId    String
  barber      Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  name        String
  duration    Int       // Dakika cinsinden
  price       Float
  appointments Appointment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Appointment {
  id          String    @id @default(cuid())
  barberId    String
  barber      Barber    @relation(fields: [barberId], references: [id])
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkingHours {
  id          String    @id @default(cuid())
  barberId    String
  barber      Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  dayOfWeek   Int       // 1-7 (Pazartesi-Pazar)
  startTime   String    // Format: "HH:mm"
  endTime     String    // Format: "HH:mm"
  isOpen      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  barberId    String
  barber      Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  rating      Int       @db.SmallInt // 1-5 arasÄ±
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  BARBER
  CUSTOMER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
